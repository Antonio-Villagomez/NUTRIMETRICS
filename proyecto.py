# -*- coding: utf-8 -*-
"""Proyecto-Parte2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hrh371DnFLD5So7j0nT9TIOad7JtqobN
"""

from datetime import date
from typing import List, Dict
from collections import Counter

# Clase estudiante
class Estudiante:

    def __init__(self, nombre: str, edad: int, genero: str, areaEstudio: str):
        self.nombre: str = nombre
        self.edad: int = edad
        self.genero: str = genero
        self.areaEstudio: str = areaEstudio

    def __str__(self) -> str:
        return f"Estudiante(Nombre: {self.nombre}, Edad: {self.edad}, Área: {self.areaEstudio})"
# Clase alimento
class Alimento:

    def __init__(self, nombre: str, tipo: str, carbohidrato: float, proteina: float, fibra: float, otro: float, porcion: str):
        self.nombre: str = nombre
        self.tipo: str = tipo
        self.carbohidrato: float = carbohidrato
        self.proteina: float = proteina
        self.fibra: float = fibra
        self.otro: float = otro
        self.porcion: str = porcion

    def __str__(self) -> str:
        return f"Alimento(Nombre: {self.nombre}, Tipo: {self.tipo}, Porción: {self.porcion})"
# Clase ingesta
class Ingesta:

    def __init__(self, estudiante: Estudiante, alimento: Alimento, fecha: date, cantidad: float):
        self.estudiante: Estudiante = estudiante
        self.alimento: Alimento = alimento
        self.fecha: date = fecha
        self.cantidad: float = cantidad

    def __str__(self) -> str:
        return (f"Ingesta(Estudiante: {self.estudiante.nombre} consumió {self.cantidad} "
                f"de {self.alimento.nombre} el {self.fecha})")
# Clase reporte
class ReporteAnalisis:

    def __init__(self, promedioCarbohidratos: float, promedioProteinas: float, promedioFibra: float, alimentosMasConsumidos: Dict[str, int]):
        self.promedioCarbohidratos: float = promedioCarbohidratos
        self.promedioProteinas: float = promedioProteinas
        self.promedioFibra: float = promedioFibra
        self.alimentosMasConsumidos: Dict[str, int] = alimentosMasConsumidos

    def generarReporte(self) -> str:
        reporte_str = "--- Reporte de Análisis Nutricional ---\n"
        reporte_str += f"Promedio de Carbohidratos por ingesta: {self.promedioCarbohidratos:.2f} g\n"
        reporte_str += f"Promedio de Proteínas por ingesta: {self.promedioProteinas:.2f} g\n"
        reporte_str += f"Promedio de Fibra por ingesta: {self.promedioFibra:.2f} g\n"
        reporte_str += "\n--- Alimentos Consumidos (Frecuencia de Ingesta) ---\n"
        if self.alimentosMasConsumidos:
            for alimento, count in sorted(self.alimentosMasConsumidos.items(), key=lambda item: item[1], reverse=True):
                reporte_str += f"- {alimento}: {count} {'vez' if count == 1 else 'veces'}\n"
        else:
            reporte_str += "No hay datos de consumo de alimentos para mostrar.\n"
        return reporte_str
# Clase del analizador de alimentacion
class AnalizadorAlimentacion:

    def __init__(self):
        pass

    def analizarIngesta(self, ingestas: List[Ingesta]) -> ReporteAnalisis:
        if not ingestas:
            return ReporteAnalisis(0.0, 0.0, 0.0, {})

        total_carbohidratos_consumidos = 0.0
        total_proteinas_consumidas = 0.0
        total_fibra_consumida = 0.0
        nombres_alimentos_consumidos = []

        for ingesta_actual in ingestas:
            total_carbohidratos_consumidos += ingesta_actual.alimento.carbohidrato * ingesta_actual.cantidad
            total_proteinas_consumidas += ingesta_actual.alimento.proteina * ingesta_actual.cantidad
            total_fibra_consumida += ingesta_actual.alimento.fibra * ingesta_actual.cantidad
            nombres_alimentos_consumidos.append(ingesta_actual.alimento.nombre)
# Verificar para no dividir sobre 0
        num_total_de_ingestas = len(ingestas)
        promedio_carbs = total_carbohidratos_consumidos / num_total_de_ingestas if num_total_de_ingestas > 0 else 0.0
        promedio_proteinas = total_proteinas_consumidas / num_total_de_ingestas if num_total_de_ingestas > 0 else 0.0
        promedio_fibra = total_fibra_consumida / num_total_de_ingestas if num_total_de_ingestas > 0 else 0.0
        frecuencia_alimentos = Counter(nombres_alimentos_consumidos)

        return ReporteAnalisis(
            promedioCarbohidratos=promedio_carbs,
            promedioProteinas=promedio_proteinas,
            promedioFibra=promedio_fibra,
            alimentosMasConsumidos=dict(frecuencia_alimentos)
        )

# Ejemplo de Uso
if __name__ == "__main__":
    estudiante_juan = Estudiante(nombre="Juan Pérez", edad=20, genero="Masculino", areaEstudio="Ingeniería de Sistemas")
    estudiante_ana = Estudiante(nombre="Ana López", edad=22, genero="Femenino", areaEstudio="IA")

    manzana = Alimento("Manzana", "Fruta", 25.0, 0.5, 4.0, 0.2, "1 pieza mediana (aprox. 180g)")
    pechuga_pollo = Alimento("Pechuga de Pollo", "Carne", 0.0, 31.0, 0.0, 2.0, "100g cocida")
    arroz_blanco = Alimento("Arroz Blanco", "Cereal", 28.0, 2.7, 0.4, 0.1, "1/2 taza cocida (aprox. 75g)")
    lentejas = Alimento("Lentejas", "Legumbre", 20.0, 9.0, 8.0, 1.0, "1/2 taza cocida (aprox. 100g)")

    ingesta1_juan = Ingesta(estudiante_juan, manzana, date(2024, 5, 20), 1.0)
    ingesta2_juan = Ingesta(estudiante_juan, pechuga_pollo, date(2024, 5, 20), 1.5)
    ingesta3_juan = Ingesta(estudiante_juan, arroz_blanco, date(2024, 5, 20), 2.0)

    ingesta1_ana = Ingesta(estudiante_ana, lentejas, date(2024, 5, 21), 1.0)
    ingesta2_ana = Ingesta(estudiante_ana, manzana, date(2024, 5, 21), 2.0)

    ingestas_de_juan = [ingesta1_juan, ingesta2_juan, ingesta3_juan]
    todas_las_ingestas = [ingesta1_juan, ingesta2_juan, ingesta3_juan, ingesta1_ana, ingesta2_ana]

    analizador = AnalizadorAlimentacion()

    print(f" Análisis de Ingestas para {estudiante_juan.nombre}:")
    reporte_juan = analizador.analizarIngesta(ingestas_de_juan)
    print(reporte_juan.generarReporte())

    print("\n" + "="*60 + "\n")

    print(" Análisis de Todas las Ingestas Registradas:")
    reporte_todos = analizador.analizarIngesta(todas_las_ingestas)
    print(reporte_todos.generarReporte())

    print("\n" + "="*60 + "\n")

    print(" Análisis para una lista vacía de ingestas:")
    reporte_vacio = analizador.analizarIngesta([])
print(reporte_vacio.generarReporte())